package kr.co.symphony.notice;


import java.sql.Connection;



import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import kr.co.symphony.paging.PageDTO;
import net.utility.DBClose;
import net.utility.DBOpen;

public class NoticeDAO {

	private DBOpen dbopen=null;
	private Connection con=null;
	private PreparedStatement pstmt=null;
	private ResultSet rs=null;
	private StringBuilder sql=null;
	
	public NoticeDAO() {
		dbopen=new DBOpen();
	} //end
	
	public int create(NoticeDTO dto) {
		
		System.out.println("noticeCreate.do >>>>>> createForm >>>>>>create");
		
		int cnt=0;
		
		try {
			con=dbopen.getConnection();		
			sql=new StringBuilder();		
			sql.append(" INSERT INTO notice_tb(W_NUM, ID, W_TITLE, W_TEXT, W_DATE, W_CODE)");
			sql.append(" VALUES( notice_seq.nextval, ?, ?, ?, sysdate , 'n' )");
			sql.append(" WHERE ulevel in () ");
			
			pstmt=con.prepareStatement(sql.toString()); 
				
			pstmt.setString(1, dto.getId());
			pstmt.setString(2, dto.getwTitle());
			pstmt.setString(3, dto.getwText());

			cnt=pstmt.executeUpdate();	
			
		}catch(Exception e) {
			System.out.println("글쓰기 실패:" + e);
		
		}finally {
			DBClose.close(con, pstmt);
		}//end
		
		return cnt;		
	}//create() end
	
	public ArrayList<NoticeDTO> list(PageDTO page){
		
		ArrayList<NoticeDTO> list=null;
		
		System.out.println("list");
		
		try {
			con=dbopen.getConnection();
		
			sql=new StringBuilder();
			
			sql.append("SELECT B.* FROM ");
			sql.append("(SELECT ROWNUM AS RM , A.* FROM ");
			sql.append("(SELECT W_NUM, ID, W_TITLE, TO_CHAR(W_DATE ,'YYYY-MM-DD') AS W_DATE , W_VIEWS FROM notice_tb ");
			sql.append("WHERE W_CODE = 'n' ORDER BY W_NUM DESC) A )B ");
			sql.append("WHERE RM > ((?-1)*?) AND rm <= (?*?)");
			
			pstmt=con.prepareStatement(sql.toString());
			
			System.out.println(sql.toString());
			
			pstmt.setInt(1, page.getNowPage());
			pstmt.setInt(2, page.getAmount());
			pstmt.setInt(3, page.getNowPage());
			pstmt.setInt(4, page.getAmount());
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				list=new ArrayList<NoticeDTO>();
			
				do {
					NoticeDTO dto=new NoticeDTO();
				
					dto.setwNum(rs.getInt("W_NUM"));
					dto.setId(rs.getString("ID"));
					dto.setwTitle(rs.getString("W_TITLE"));
					dto.setwDate(rs.getString("W_DATE"));
					dto.setwViews(rs.getInt("W_VIEWS"));
					
					list.add(dto);
				
				}while(rs.next());
			}//if end
			
		}catch(Exception e) {
			System.out.println("공지사항목록실패:" + e);
		
		}finally {
			DBClose.close(con, pstmt, rs);
		}//end
		
		return list;
		
	}//list() end
	
	
	public NoticeDTO count(NoticeDTO dto) {
		
		System.out.println("count");
		
		NoticeDTO count=new NoticeDTO();
		
		try {
            con=dbopen.getConnection();
            
            sql=new StringBuilder();
            sql.append(" UPDATE notice_tb ");
            sql.append(" SET W_VIEWS=W_VIEWS+1 ");
            sql.append(" WHERE W_NUM=? ");
            
            pstmt=con.prepareStatement(sql.toString());
            pstmt.setInt(1, dto.getwNum());
            pstmt.executeUpdate();
            
        }catch (Exception e) {
            System.out.println("조회수 증가 실패:"+e);
        }finally {
            DBClose.close(con, pstmt);
        }//end    
		
		return count;		
	}//count() end
	
	
	
	public NoticeDTO detail(NoticeDTO dto) {
	
		System.out.println("detail");
		
		NoticeDTO detail=new NoticeDTO();
		
		try {
			con=dbopen.getConnection();		
			
			sql=new StringBuilder();		
			sql.append(" SELECT W_NUM,W_TITLE,W_TEXT");
			sql.append(" FROM notice_tb");
			sql.append(" WHERE W_NUM=?");
			
			pstmt=con.prepareStatement(sql.toString()); 
														
			pstmt.setInt(1, dto.getwNum());
			
			rs=pstmt.executeQuery();
			
			rs.next();
			
			detail.setwNum(rs.getInt("W_NUM"));
			detail.setwTitle(rs.getString("W_TITLE"));
			detail.setwText(rs.getString("W_TEXT"));

		}catch(Exception e) {
			System.out.println("글상세보기 실패:" + e);
		
		}finally {
			DBClose.close(con, pstmt, rs);
		}//end
		
		return detail;		
	}//detail() end
	
	
	public int delete(int wNum) {
		int cnt=0;
    	try {
    		con=dbopen.getConnection();
            
            sql=new StringBuilder();
            sql.append(" DELETE FROM notice_tb ");
            sql.append(" WHERE W_NUM=? AND W_CODE='n'");
            
            pstmt=con.prepareStatement(sql.toString());
            pstmt.setInt(1, wNum);
          
            cnt=pstmt.executeUpdate();
    		
    		
    	}catch (Exception e) {
            System.out.println("공지사항 삭제 실패:"+e);
        }finally {
            DBClose.close(con, pstmt);
        }//end
        return cnt;
    }//delete()end
	
	
	public int update(NoticeDTO dto) {
		int cnt=0;
		System.out.println("update");

		
		try {
			con=dbopen.getConnection();		
			
			sql=new StringBuilder();		
			sql.append(" UPDATE notice_tb ");
			sql.append(" SET W_TITLE=?, W_TEXT=?");
			sql.append(" WHERE W_NUM=? AND W_CODE in ('n') ");
	            
			pstmt=con.prepareStatement(sql.toString()); 
														
			pstmt.setString(1, dto.getwTitle());
			pstmt.setString(2, dto.getwText());
			pstmt.setInt(3, dto.getwNum());
			
			cnt=pstmt.executeUpdate();
		
		}catch (Exception e) {
            System.out.println("공지사항 수정 실패:"+e);	
			
		}finally {
			DBClose.close(con, pstmt);
		}//end
		
		return cnt;		
	}//update() end

	
	public int total() {

		System.out.println("total()");
		
		int total = 0;
		
		try {
			con=dbopen.getConnection();		
			
			sql=new StringBuilder();		
			sql.append(" SELECT COUNT(*) cnt");
			sql.append(" FROM notice_tb");
			sql.append(" WHERE W_CODE = 'n'");
			
			pstmt=con.prepareStatement(sql.toString()); 
			
			System.out.println(sql.toString());
			
			rs=pstmt.executeQuery();
			rs.next();
			
			total = rs.getInt("cnt");

		}catch(Exception e) {
			System.out.println(" total 실패 :" + e);
		
		}finally {
			DBClose.close(con, pstmt, rs);
		}//end
		
		return total;
	}//total() end
	
}//class end

